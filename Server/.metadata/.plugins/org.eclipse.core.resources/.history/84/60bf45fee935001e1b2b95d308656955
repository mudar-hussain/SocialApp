package com.social.socialapp.filter;

import java.io.IOException;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.context.support.WebApplicationContextUtils;
import org.springframework.web.filter.OncePerRequestFilter;

import com.social.socialapp.constant.SecurityConstant;
import com.social.socialapp.security.JwtTokenUtil;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletContext;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@Component
public class JwtTokenGeneratorFilter extends OncePerRequestFilter {
	
	
	private JwtTokenUtil jwtTokenUtil;
	
//	JwtTokenUtil jwtTokenUtil = new JwtTokenUtil();
	
//	@Autowired
//	public JwtTokenGeneratorFilter(JwtTokenUtil jwtTokenUtil){
//		this.jwtTokenUtil = jwtTokenUtil;
//	}
//	public JwtTokenGeneratorFilter(){
//		SpringBeanAutowiringSupport.processInjectionBasedOnCurrentContext(this);
//	}

	public JwtTokenGeneratorFilter() {
		// TODO Auto-generated constructor stub
	}

	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
			throws ServletException, IOException {

		ServletContext servletContext = request.getServletContext();
        WebApplicationContext webApplicationContext = WebApplicationContextUtils.getWebApplicationContext(servletContext);
        
		if(jwtTokenUtil==null){
			jwtTokenUtil = webApplicationContext.getBean(JwtTokenUtil.class);
        }
		
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		System.out.println("Authentication: "+ authentication);

		if (authentication != null) {
			
			System.out.println("In JWTTokenGeneratorFilter");

			UserDetails userDetails = (UserDetails) authentication.getPrincipal();
			
			System.out.println("Generating token for username: " + authentication.getName());
			
			String jwtToken = jwtTokenUtil.generateToken(userDetails);

			System.out.println("Generated token: " + jwtToken);
			System.out.println("Subject of Generated token: "+jwtTokenUtil.getUsernameFromToken(jwtToken));
			
			response.setHeader(SecurityConstant.JWT_TOKEN_HEADER, jwtToken);
		}
		filterChain.doFilter(request, response);

	}

	
	protected boolean shouldNotFilter(HttpServletRequest req) throws ServletException {
		return !req.getServletPath().equals("/signin");
	}
}
