package com.social.socialapp.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityCustomizer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.security.web.authentication.www.BasicAuthenticationFilter;

import com.social.socialapp.filter.JWTTokenGeneratorFilter;
import com.social.socialapp.filter.JwtTokenValidationFilter;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

	@Bean
	public PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}

	//Authentication

	@Bean
	public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) throws Exception {
		 return authenticationConfiguration.getAuthenticationManager();
	}
		
	//Authorization
	
	@Bean
	public SecurityFilterChain filterChain(HttpSecurity httpSecurity) throws Exception {

		httpSecurity
		.exceptionHandling()
				.accessDeniedPage("/403") //exception page redirect
		.and()
		.sessionManagement()
				.sessionCreationPolicy(SessionCreationPolicy.STATELESS)	//make session STATELESS
		.and()
		.authorizeHttpRequests()
				.requestMatchers("/signup", "/signin").permitAll() //no token required to access this URL
				.anyRequest().authenticated() //token required to all rest URLs
		.and()
		.addFilterAfter(new JWTTokenGeneratorFilter(), BasicAuthenticationFilter.class) //register filter for 1st request
		.addFilterAfter(new JWTTokenGeneratorFilter(), UsernamePasswordAuthenticationFilter.class) //register filter for 1st request
		.addFilterBefore(new JwtTokenValidationFilter(), BasicAuthenticationFilter.class) //register filter for 2nd request onwards
		.addFilterBefore(new JwtTokenValidationFilter(), UsernamePasswordAuthenticationFilter.class) //register filter for 2nd request onwards
		.csrf()
				.disable();
		
		return httpSecurity.build();
	}
	
	@Bean
	public WebSecurityCustomizer webSecurityCustomizer() {
	    return (web) -> web.ignoring().requestMatchers("/images/**", "/js/**", "/webjars/**");
	}
}
