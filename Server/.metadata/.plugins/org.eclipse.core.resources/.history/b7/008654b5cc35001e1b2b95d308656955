package com.social.socialapp.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.social.socialapp.constant.SecurityConstant;
import com.social.socialapp.dto.StoryDto;
import com.social.socialapp.entities.Story;
import com.social.socialapp.entities.User;
import com.social.socialapp.exceptions.StoryException;
import com.social.socialapp.exceptions.UserException;
import com.social.socialapp.response.MessageResponse;
import com.social.socialapp.service.Interface.StoryService;
import com.social.socialapp.service.Interface.UserService;

@RestController
@RequestMapping("/api/stories")
public class StoryController {

	@Autowired
	private UserService userService;
	
	@Autowired
	private StoryService storyService;
	
	@PostMapping("/create")
	public ResponseEntity<StoryDto> createStoryHandler(@RequestBody Story story,
			@RequestHeader(SecurityConstant.JWT_TOKEN_HEADER) String token) throws UserException{
		
		User user = userService.findUserProfile(token);
		StoryDto createdStory = storyService.createStory(story, user.getId());
		
		return ResponseEntity.ok(createdStory);	
		
		
	}
	
	@GetMapping("/all/{userId}")
	public ResponseEntity<List<StoryDto>> findStoryByUserIdHandler(@PathVariable("userId") Integer userId) throws UserException, StoryException{
			
		List<StoryDto> stories = storyService.findStoryByUserId(userId);
		
		return ResponseEntity.ok(stories);
		
	} 
	
	@GetMapping("/{storyId}")
	public ResponseEntity<StoryDto> findStoryByIdHandler(@PathVariable("storyId") Integer storyId) throws UserException, StoryException{
			
		StoryDto story = storyService.findStoryDtoById(storyId);
		
		return ResponseEntity.ok(story);
		
	} 
	
	@DeleteMapping("/delete/{storyId}")
	public ResponseEntity<MessageResponse> deleteStoryByIdHandler(@PathVariable("storyId") Integer storyId,
			@RequestHeader(SecurityConstant.JWT_TOKEN_HEADER) String token) throws UserException, StoryException{
			
		User user = userService.findUserProfile(token);
		
		String message = storyService.deleteStory(storyId, user.getId()); 
		
		MessageResponse messageResponse = new MessageResponse(message);
		
		return new ResponseEntity<MessageResponse>(messageResponse, HttpStatus.ACCEPTED);
		
	} 
}
